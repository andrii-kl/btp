plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

sourceSets {
    intTest {}
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'com.github.sink772:javaee-scorex:0.5.2'
    implementation project(':bmv')
    compileOnly files('../api-0.8.8-SNAPSHOT.jar')

    testImplementation "com.squareup.okhttp3:okhttp:3.11.0"
    intTestImplementation project(':testinteg')
    intTestImplementation 'foundation.icon:icon-sdk:2.0.0-SNAPSHOT'
    intTestImplementation 'org.web3j:core:4.8.4'
    testImplementation project(':testsvc')
    testImplementation 'org.mockito:mockito-core:3.4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

optimizedJar {
    mainClassName = 'foundation.icon.btp.eventdecoder.edgeware.EventDecoderScore'
    // archivesBaseName = 'EventDecoderScore'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

deployJar {
    endpoints {
        gangnam {
            uri = 'https://gicon.net.solidwallet.io/api/v3'
            nid = 7
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 3
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
    parameters {}
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = "full"
}


task integrationTest(type: Test, dependsOn: optimizedJar) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    testLogging.showStandardStreams = true

    // use the common config files
    systemProperty('env.props', new File(project(':testinteg').projectDir, 'conf/env.props'))

    def prefix = 'score.path.'
    systemProperty(prefix + project.name, optimizedJar.outputJarName)
}