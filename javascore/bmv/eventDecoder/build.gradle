plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

sourceSets {
    intTest {}
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'com.github.sink772:javaee-scorex:0.5.2'
    implementation project(':lib')
    compileOnly files('../api-0.8.8-SNAPSHOT.jar')

    testImplementation "com.squareup.okhttp3:okhttp:3.11.0"
    intTestImplementation project(':testinteg')
    intTestImplementation 'foundation.icon:icon-sdk:2.0.0'
    intTestImplementation 'org.web3j:core:4.8.4'
    testImplementation project(':testsvc')
    testImplementation 'org.mockito:mockito-core:3.4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

optimizedJar {
    mainClassName = 'foundation.icon.btp.eventdecoder.EventDecoderScore'
    // archivesBaseName = 'EventDecoderScore'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

deployJar {
    endpoints {
        gangnam {
            uri = 'https://gicon.net.solidwallet.io/api/v3'
            nid = 7
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 3
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
    parameters {}
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = "full"
}

def metaDataFileName

tasks.register('buildKusamaDecoder') {
    archivesBaseName = 'KusamaEventDecoder'
    metaDataFileName = 'KusamaMetaData.json'
    dependsOn loadMetaData
    buildKusamaDecoder.finalizedBy optimizedJar
}

tasks.register('buildMoonriverDecoder') {
    archivesBaseName = 'MoonriverEventDecoder'
    metaDataFileName = 'MoonriverMetaData.json'
    project.ext.accountIdSize = 20
    dependsOn loadMetaData
    buildMoonriverDecoder.finalizedBy optimizedJar
}

tasks.register('buildEdgewareDecoder') {
    archivesBaseName = 'EdgewareEventDecoder'
    metaDataFileName = 'EdgewareMetaData.json'
    dependsOn loadMetaData
    buildEdgewareDecoder.finalizedBy optimizedJar
}

task deleteGeneratedEventDecoderFiles(type: Delete) {
    delete fileTree("""${projectDir}/src/main/java/foundation/icon/btp/lib/EventDecoder/Module/""") {
            include '**/*Event.java'
    }
    delete fileTree("""${projectDir}/src/main/java/foundation/icon/btp/lib/EventDecoder/Module/Base""") {
            include '**/*EventBase.java'
    }
    delete fileTree("""${projectDir}/src/main/java/foundation/icon/btp/lib/EventDecoder/""") {
            include '**/EventDecoder.java'
    }
}

tasks.register('loadMetaData') {
    dependsOn deleteGeneratedEventDecoderFiles
    doLast {
        def accountIdSize = 32;
        if (project.hasProperty('accountIdSize')) {
            accountIdSize = project.ext.accountIdSize
        }
        if (metaDataFileName == null) {
            metaDataFileName = "metaData.json"
        }
        def inputFile = new File(projectDir, metaDataFileName)
        def json = new groovy.json.JsonSlurper().parseText(inputFile.text)
        def modules = json.metadata.v12 != null ? json.metadata.v12.modules : json.metadata.v13.modules
        def geratingEventDecoderCode =
"""package foundation.icon.btp.lib.eventdecoder;

import foundation.icon.btp.lib.utils.ByteSliceInput;

public class EventDecoder extends EventDecoderBase {
    public static byte[] decodeEvent(byte mainIndex, byte subIndex, ByteSliceInput input) {
        SizeDecoder.accountIdSize = ${accountIdSize};
        switch (mainIndex) {
"""
        modules.each { item -> 
            if (item.events != null && item.events.size() != 0) { 
                def geratingModuleEventDecoderCode =
"""package foundation.icon.btp.lib.eventdecoder;

import foundation.icon.btp.lib.utils.ByteSliceInput;

public class ${item.name}Event extends ${item.name}EventBase {
    public static byte[] decodeEvent(byte subIndex, ByteSliceInput input) {
        switch (subIndex) {
"""
                def geratingModuleEventDecoderBaseCode =
"""package foundation.icon.btp.lib.eventdecoder;

import foundation.icon.btp.lib.utils.ByteSliceInput;

public class ${item.name}EventBase {
"""
                def subIndex = 0;
                item.events.each { event -> 
                    geratingModuleEventDecoderCode += 
"""            case (byte)(${subIndex}):
                return ${event.name[0].toLowerCase() + event.name.substring(1)}(input);
"""
                    geratingModuleEventDecoderBaseCode +=
"""    public static byte[] ${event.name[0].toLowerCase() + event.name.substring(1)}(ByteSliceInput input) {
"""
                    if (event.args != null && event.args.size() > 0) {
                        geratingModuleEventDecoderBaseCode += 
"""       int size = 0;
"""
                        event.args.each { arg -> 
                            def functionName = arg
                            if (functionName.startsWith("Option<") || functionName.startsWith("Vec<")) {
                                functionName = functionName.replace('<', '_')
                                functionName = functionName.replace('(', '_')
                                functionName = functionName.replace(')', '')
                                functionName = functionName.replace('>', '')
                                functionName = functionName.replace(',', '_')
                                functionName = functionName.replace('__', '_')
                            }
                            geratingModuleEventDecoderBaseCode += 
"""       size += SizeDecoder.${functionName}(input, size);
"""
                        }

                        geratingModuleEventDecoderBaseCode += 
"""       return input.take(size);
"""
                    } else {
                        geratingModuleEventDecoderBaseCode += 
"""       return null;
"""
                    }
                    subIndex++
                    geratingModuleEventDecoderBaseCode += 
"""    }

"""
                }
                geratingModuleEventDecoderBaseCode += 
"""}
"""
                geratingModuleEventDecoderCode +=
"""        }
        return null;
    }
}
"""
                geratingEventDecoderCode +=
"""           case (byte)(${item.index}):
                return ${item.name}Event.decodeEvent(subIndex, input);
"""

                new File(projectDir, "/src/main/java/foundation/icon/btp/lib/EventDecoder/Module/${item.name}Event.java").text = geratingModuleEventDecoderCode

                new File(projectDir, "/src/main/java/foundation/icon/btp/lib/EventDecoder/Module/Base/${item.name}EventBase.java").text = geratingModuleEventDecoderBaseCode
        }
    }

        geratingEventDecoderCode +=
"""        }
        return null;
    }
}
"""
        new File(projectDir, "/src/main/java/foundation/icon/btp/lib/EventDecoder/EventDecoder.java").text = geratingEventDecoderCode
    }
}

task integrationTest(type: Test, dependsOn: optimizedJar) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    testLogging.showStandardStreams = true

    // use the common config files
    systemProperty('env.props', new File(project(':testinteg').projectDir, 'conf/env.props'))

    def prefix = 'score.path.'
    systemProperty(prefix + project.name, optimizedJar.outputJarName)
}