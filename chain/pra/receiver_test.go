package pra

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"testing"

	"github.com/centrifuge/go-substrate-rpc-client/v3/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/icon-project/btp/chain"
	"github.com/icon-project/btp/chain/pra/binding"
	"github.com/icon-project/btp/chain/pra/mocks"
	"github.com/icon-project/btp/common/log"
	"github.com/stretchr/testify/assert"
	mock "github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

type blockinfo struct {
	BlockNumber            uint64
	Hash                   SubstrateHash
	Header                 SubstrateHeader
	ScaleEncodedHeader     []byte
	MetaData               SubstrateMetaData
	StorageKey             SubstrateStorageKey
	SystemEventsStorageRaw SubstrateStorageDataRaw
	SystemEventsReadProof  ReadProof
}

func readBlockInfoFromAssets(path string, bi *blockinfo) error {
	b, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err)
	}

	return json.Unmarshal(b, &bi)
}

func TestReceiver_ReceiveLoop(t *testing.T) {
	t.Run("should monitor from the given height", func(t *testing.T) {
		subClient := &MockSubstrateClient{}
		r := &Receiver{
			l: log.New(),
			c: &Client{
				subClient:         subClient,
				stopMonitorSignal: make(chan bool),
			},
		}

		bi := &blockinfo{}
		require.NoError(t, readBlockInfoFromAssets("assets/moonbase_blockinfo_243221.json", bi))

		subClient.On("GetFinalizedHead").Return(bi.Hash, nil).Once()
		subClient.On("GetHeader", bi.Hash).Return(&bi.Header, nil).Twice()
		subClient.On("GetBlockHash", uint64(bi.BlockNumber)).Return(bi.Hash, nil).Once()
		subClient.On("GetMetadata", bi.Hash).Return(&bi.MetaData, nil).Once()
		subClient.On("GetStorageRaw", bi.StorageKey, bi.Hash).Return(&bi.SystemEventsStorageRaw, nil).Once()

		err := r.ReceiveLoop(243221, 1, func(bu *chain.BlockUpdate, rps []*chain.ReceiptProof) {
			assert.EqualValues(t, bu.Height, 243221)
			assert.Equal(t, bi.Hash.Hex(), fmt.Sprintf("0x%x", bu.BlockHash))
			assert.Equal(t,
				fmt.Sprintf("0x%x", bi.ScaleEncodedHeader),
				fmt.Sprintf("0x%x", bu.Header),
			)
			assert.Equal(t, "0xf90140b9013b4b6ca5b74e19d4bc04280edf20a53a4ebe1402cbb2ef7ed9a1611fb8411a33ca56d80e006415ef11020701d83ae5456ccecb3685eb39acc6b52d3e481214d8f1aa6b5465e347562ba9c7c993862047e1d6f020c25ab4139676afbf7170c254e2f36cefe70c046e6d62738060eed538a43e6738f4c560c5d950be96c72ad591f0c16f564c003b5c7b895c0e0466726f6e890101f7b9c5fb3f5b72f937ed511b173e5a39b9fb3ffaa1cc4dd024a4c7c36c7da8610847fec28647d5f0806548f385257170d76cf6e890f7467ef33b36dcc5b9be1b15d0fdb267aa2fce057cc81a0e2397f5a32ffd8637753f7d0c0c0b7289b002dc3f056e6d627301019a1b7069e8aa71015a15925595589999890dba42cb87dae2b5aabfee791bad47d380392c626eef34701ea3a95d7dd4fc891759cb375991aacbc1ee3663742289f800",
				fmt.Sprintf("0x%x", bu.Proof),
			)
			r.StopReceiveLoop()
		}, func() {})

		assert.NoError(t, err)
	})

	t.Run("should call bmc.parseMessage when Parachain emits EVM Log", func(t *testing.T) {
		subClient := &MockSubstrateClient{}
		bmcContract := &mocks.BMCContract{}
		r := &Receiver{
			l: log.New(),
			c: &Client{
				subClient:         subClient,
				stopMonitorSignal: make(chan bool),
				bmc:               bmcContract,
			},
		}

		bi := &blockinfo{}
		require.NoError(t, readBlockInfoFromAssets("assets/moonbase_blockinfo_315553.json", bi))
		subClient.On("GetFinalizedHead").Return(bi.Hash, nil).Once()
		subClient.On("GetHeader", bi.Hash).Return(&bi.Header, nil).Once()
		subClient.On("GetBlockHash", uint64(bi.BlockNumber)).Return(bi.Hash, nil).Once()
		subClient.On("GetHeader", bi.Hash).Return(&bi.Header, nil).Once()
		subClient.On("GetMetadata", bi.Hash).Return(&bi.MetaData, nil).Twice()
		subClient.On("GetStorageRaw", bi.StorageKey, bi.Hash).Return(&bi.SystemEventsStorageRaw, nil).Once()
		// 4 EVM_Logs event
		bmcContract.On("ParseMessage", mock.AnythingOfType("types.Log")).Return(nil, errors.New("abi: could not locate named method or event")).Times(4)

		err := r.ReceiveLoop(315553, 1, func(bu *chain.BlockUpdate, rps []*chain.ReceiptProof) {
			assert.EqualValues(t, bu.Height, 315553)
			assert.Equal(t, bi.Hash.Hex(), fmt.Sprintf("0x%x", bu.BlockHash))
			assert.Equal(t,
				fmt.Sprintf("0x%x", bi.ScaleEncodedHeader),
				fmt.Sprintf("0x%x", bu.Header),
			)
			assert.Equal(t, "0xf90180b9017bf1e8f0653422859dea6705ec5d86015a3c9f4c7c03eccbcb4bf858682956fb2886421300932c9abc4e9966ecf08dd3a5aa7087b448a88e54d18b3caebdbb2559c3f8744b25385e8e912f3965b85334a4524a6e15b21fb3c1b355d9e64df395b856a635970c046e6d6273802485ca9e9427894cb1864d725977e3c168171daf22bacf64c7ad5e0674c331730466726f6e890201e93015e1d2195ae2d73004a790db2e4bf394e40f14df3e0a2edd9dff0930e8a910ef0e6bfa9d8bb055f94e873f1df551b42df11d2cb053811279a1101e9c03fcf9cfa1b41ba3027ac3bbda9af6685440e8d89f12c7aca5987b334e91dbbaa4aa9356cb1e07577d7374463ec88709ce945f280b072b89f4bc8c0e70abf4b9b267c090d9ec032f7d7121f9bc2b2a8b9a6a06fd7f434cbebb963d6cfcb2e4206d2f43056e6d627301019cb74fccc8c86d67b5766b1c035e16ed4de18ecd091d4dd8724185eb28dbd1612983e904aafb984f05bd27443b6f8a56fbea955e208718d02e52eb28d0e62e89f800",
				fmt.Sprintf("0x%x", bu.Proof),
			)
			r.StopReceiveLoop()
		}, func() {})

		assert.NoError(t, err)
	})

	t.Run("should build StateProof when EVM Log events contains BMC SendMessage Event", func(t *testing.T) {
		subClient := &MockSubstrateClient{}
		ethClient, err := ethclient.Dial("wss://icon-btp.ecl.vn:34008")
		require.NoError(t, err)

		bmc, err := binding.NewBMC(EvmHexToAddress("0x5b5B619E6A040EBCB620155E0aAAe89AfA45D090"), ethClient)
		require.NoError(t, err)

		r := &Receiver{
			l:   log.New(),
			src: "btp://0x501.pra/0x5b5B619E6A040EBCB620155E0aAAe89AfA45D090",
			c: &Client{
				subClient:         subClient,
				ethClient:         ethClient,
				stopMonitorSignal: make(chan bool),
				bmc:               bmc,
			},
		}

		bi := &blockinfo{}
		require.NoError(t, readBlockInfoFromAssets("assets/moonriverlocal_blockinfo_143004.json", bi))
		subClient.On("GetFinalizedHead").Return(bi.Hash, nil).Once()
		subClient.On("GetHeader", bi.Hash).Return(&bi.Header, nil).Once()
		subClient.On("GetBlockHash", uint64(bi.BlockNumber)).Return(bi.Hash, nil).Once()
		subClient.On("GetHeader", bi.Hash).Return(&bi.Header, nil).Once()
		subClient.On("GetMetadata", bi.Hash).Return(&bi.MetaData, nil).Twice()
		subClient.On("GetStorageRaw", bi.StorageKey, bi.Hash).Return(&bi.SystemEventsStorageRaw, nil).Once()
		subClient.On("GetReadProof", bi.StorageKey, bi.Hash).Return(bi.SystemEventsReadProof, nil).Once()

		err = r.ReceiveLoop(143004, 1, func(bu *chain.BlockUpdate, rps []*chain.ReceiptProof) {
			assert.EqualValues(t, bu.Height, 143004)
			assert.Equal(t, bi.Hash.Hex(), fmt.Sprintf("0x%x", bu.BlockHash))
			assert.Equal(t,
				fmt.Sprintf("0x%x", bi.ScaleEncodedHeader),
				fmt.Sprintf("0x%x", bu.Header),
			)
			assert.Equal(t, "0xf8d8b8d4b02aebd1719933b78c76c3f51f6e1b2f760162f3b2f43c6818367dbadb8f7c2072ba0800049ac1e8cddb4d4de2fbe62e180ce05a2b329069f863a9855eb64534a846fa0cd7397f52d2d32573926eee56ca9a35f0c90d1c9a9610e21916c9b8aff1b9ba7608046e6d627380d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d0466726f6e0901010db4dc2444f0ac86a3202819682e13bb5fd9d70ce01006f67720c1628f04745604bfafb68beb571aac735e8be629f3a13eb6e0263b873a9039f1103164da6eefb4f800",
				fmt.Sprintf("0x%x", bu.Proof),
			)
			assert.NotEmpty(t, rps)
			assert.Contains(t, rps, &chain.ReceiptProof{
				Proof: types.MustHexDecodeString("0xf91105a026aa394eea5630e07c48ae0c9558cef780d41e5e16056765bc8461851072c9d7f910e1bb88c3078383034313030383035623337393265383133653833626465633930333930626461346338666662656232663266653337396461623636303436306535346266613864626431386630383038363463353836366335393533613162373630666338386362656665383531633434303938353036343863383564386463373637373432353731633463353962b90abb8b830783830383130343830323266643564336262346239386130666661353135666533633039333764356231636262383161386632626231613263363263316562653365386139353361313534356538643433346436313235623430343433666531316664323932643133613431303033303030303030383037646136633264383533303366303132326235653365333336333363646639643665633936663137306166373361376165336566313966353534646366646665"),
			})
			r.StopReceiveLoop()
		}, func() {})

		assert.NoError(t, err)
	})
}
