package pra

import (
	"testing"

	gsrpc "github.com/centrifuge/go-substrate-rpc-client/v3"
	types "github.com/centrifuge/go-substrate-rpc-client/v3/types"
	"github.com/stretchr/testify/assert"
)

func TestMoonriverEventRecord(t *testing.T) {
	// Create our API with a default connection to the local node
	// api, err := gsrpc.NewSubstrateAPI("wss://wss.moonriver.moonbeam.network")
	// api, err := gsrpc.NewSubstrateAPI("wss://icon-btp.ecl.vn:34018")
	api, err := gsrpc.NewSubstrateAPI("wss://wss.testnet.moonbeam.network")
	assert.NoError(t, err)

	hash, err := api.RPC.Chain.GetBlockHashLatest()
	assert.NoError(t, err)

	meta, err := api.RPC.State.GetMetadata(hash)
	assert.NoError(t, err)

	b := types.MustHexDecodeString("0x7800000000000000d0c3b1000000000002000000010000000000000000000000000002000000020000000000000000000000000002000000030000000a004a6cf10c0f5c4d4e7cf7385bffecdaec0778357c0c0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac6027100000000000000000000000000000000000000000000000000000000000004190000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa800000000000000000000000000000000000000000000000000000000060d9a3ca0000030000000a004a6cf10c0f5c4d4e7cf7385bffecdaec0778357c1092e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c000000000000000000000000000000000000000000000000000000002ac66a8900000000000000000000000000000000000000000000000000000000000004190000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa000000030000000a004a6cf10c0f5c4d4e7cf7385bffecdaec0778357c0c0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f000000000000000000000000000000000000000000000000000000002ac66a890000000000000000000000000000000000000000000000000000000000000419800000000000000000000000000000000000000000000000000000000060d9a3ca0000030000000a004a6cf10c0f5c4d4e7cf7385bffecdaec0778357c08fe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f000000000000000000000000000000000000000000000002b5e3af16ab475a60000000030000000b006ffa2707ea1fe81c8dafa755e74f4961333b75fa000000000000000000000000000000000000000097db3c3a6e9659ce266426f95dd428a2dafa2a6fc19ce400b288a6f7d2458f760000000003000000000008ed5eab0000000000000000040000000a00a873f6b30ad79fcaf9b03a0a883d6d1f18d661d70c0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac60271000000000000000000000000000000000000000000000000000000000000044f0000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa800000000000000000000000000000000000000000000000000000000060d9a3ca0000040000000a00a873f6b30ad79fcaf9b03a0a883d6d1f18d661d71092e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c0000000000000000000000000000000000000000000000000000000059bf6c4e000000000000000000000000000000000000000000000000000000000000044f0000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa000000040000000a00a873f6b30ad79fcaf9b03a0a883d6d1f18d661d70c0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f0000000000000000000000000000000000000000000000000000000059bf6c4e000000000000000000000000000000000000000000000000000000000000044f800000000000000000000000000000000000000000000000000000000060d9a3ca0000040000000a00a873f6b30ad79fcaf9b03a0a883d6d1f18d661d708fe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f000000000000000000000000000000000000000000000002b5e3af16aaf4f4a0000000040000000b006ffa2707ea1fe81c8dafa755e74f4961333b75fa00000000000000000000000000000000000000000eca19e1a2f7a84e9e0082ba920880d66f98484c99f60d05c96875c3e09f34290000000004000000000008ed5eab0000000000000000050000000a0064b22d2b8c3ca311a0c2de34bf799f8101c893620c0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac6027100000000000000000000000000000000000000000000000000000000000003f60000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa800000000000000000000000000000000000000000000000000000000060d9a3ca0000050000000a0064b22d2b8c3ca311a0c2de34bf799f8101c893621092e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c00000000000000000000000000000000000000000000000000000004dd3788bf00000000000000000000000000000000000000000000000000000000000003f60000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa000000050000000a0064b22d2b8c3ca311a0c2de34bf799f8101c893620c0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f00000000000000000000000000000000000000000000000000000004dd3788bf00000000000000000000000000000000000000000000000000000000000003f6800000000000000000000000000000000000000000000000000000000060d9a3ca0000050000000a0064b22d2b8c3ca311a0c2de34bf799f8101c8936208fe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f000000000000000000000000000000000000000000000002b5e3af16ab7cc240000000050000000b006ffa2707ea1fe81c8dafa755e74f4961333b75fa0000000000000000000000000000000000000000b138f546a0e5930ced6000ff9cb0206ef6460539a251d35857920663d6a5af3b00000000050000000000e88063ab0000000000000000060000000a00326997c21451dab916f9f01684991b6169daf3e50c0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac6027100000000000000000000000000000000000000000000000000000000000003be0000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa800000000000000000000000000000000000000000000000000000000060d9a3ca0000060000000a00326997c21451dab916f9f01684991b6169daf3e51092e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c00000000000000000000000000000000000000000000000000000000671838dc00000000000000000000000000000000000000000000000000000000000003be0000000000000000000000006ffa2707ea1fe81c8dafa755e74f4961333b75fa000000060000000a00326997c21451dab916f9f01684991b6169daf3e50c0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f00000000000000000000000000000000000000000000000000000000671838dc00000000000000000000000000000000000000000000000000000000000003be800000000000000000000000000000000000000000000000000000000060d9a3ca0000060000000a00326997c21451dab916f9f01684991b6169daf3e508fe25c73e3b9089fac37d55c4c7efcba6f04af04cebd2fc4d6d7dbb07e1e5234f000000000000000000000000000000000000000000000002b5e3af16abd23540000000060000000b006ffa2707ea1fe81c8dafa755e74f4961333b75fa0000000000000000000000000000000000000000c0f0270ec4cdc20dc5361c3fa910b8408ab064c838da30039f521345648fcb2e0000000006000000000008ed5eab00000000000000000700000003029755f1ea7a6f6058dfc02f95bc932c3c261c1f314e0078423a39efbc1f8b5104540ac2650a75657700b069d3687e634500000000000000000000070000000b009755f1ea7a6f6058dfc02f95bc932c3c261c1f3100000000000000000000000000000000000000005985a9a059f130c0df414df4571285e6c851f098496662b524161b383dc6aa260000000007000000000040dd4a1f00000000000000")

	// Decode the event records
	events := MoonriverEventRecord{}
	err = types.EventRecordsRaw(b).DecodeEventRecords(meta, &events)
	assert.NoErrorf(t, err, "Key: %s\t\tRaw: %x\t\tBlock: %s", "0x26aa394eea5630e07c48ae0c9558cef780d41e5e16056765bc8461851072c9d7", b, "0xfb611b0c747f35e1e2248dff111c2f151aefabd91099205b6efafa0590e59d10")
}
