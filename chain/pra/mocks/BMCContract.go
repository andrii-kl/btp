// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	binding "github.com/icon-project/btp/chain/pra/binding"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// BMCContract is an autogenerated mock type for the BMCContract type
type BMCContract struct {
	mock.Mock
}

// GetStatus provides a mock function with given fields: opts, _link
func (_m *BMCContract) GetStatus(opts *bind.CallOpts, _link string) (binding.TypesLinkStats, error) {
	ret := _m.Called(opts, _link)

	var r0 binding.TypesLinkStats
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) binding.TypesLinkStats); ok {
		r0 = rf(opts, _link)
	} else {
		r0 = ret.Get(0).(binding.TypesLinkStats)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, _link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleRelayMessage provides a mock function with given fields: opts, _prev, _msg
func (_m *BMCContract) HandleRelayMessage(opts *bind.TransactOpts, _prev string, _msg string) (*types.Transaction, error) {
	ret := _m.Called(opts, _prev, _msg)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) *types.Transaction); ok {
		r0 = rf(opts, _prev, _msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string) error); ok {
		r1 = rf(opts, _prev, _msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseMessage provides a mock function with given fields: log
func (_m *BMCContract) ParseMessage(log types.Log) (*binding.BMCMessage, error) {
	ret := _m.Called(log)

	var r0 *binding.BMCMessage
	if rf, ok := ret.Get(0).(func(types.Log) *binding.BMCMessage); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.BMCMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
