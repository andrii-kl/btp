// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package chain

import mock "github.com/stretchr/testify/mock"

// MockSender is an autogenerated mock type for the Sender type
type MockSender struct {
	mock.Mock
}

// FinalizeLatency provides a mock function with given fields:
func (_m *MockSender) FinalizeLatency() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetResult provides a mock function with given fields: p
func (_m *MockSender) GetResult(p GetResultParam) (TransactionResult, error) {
	ret := _m.Called(p)

	var r0 TransactionResult
	if rf, ok := ret.Get(0).(func(GetResultParam) TransactionResult); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TransactionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(GetResultParam) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields:
func (_m *MockSender) GetStatus() (*BMCLinkStatus, error) {
	ret := _m.Called()

	var r0 *BMCLinkStatus
	if rf, ok := ret.Get(0).(func() *BMCLinkStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BMCLinkStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MonitorLoop provides a mock function with given fields: height, cb, scb
func (_m *MockSender) MonitorLoop(height int64, cb MonitorCallback, scb func()) error {
	ret := _m.Called(height, cb, scb)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, MonitorCallback, func()) error); ok {
		r0 = rf(height, cb, scb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Relay provides a mock function with given fields: segment
func (_m *MockSender) Relay(segment *Segment) (GetResultParam, error) {
	ret := _m.Called(segment)

	var r0 GetResultParam
	if rf, ok := ret.Get(0).(func(*Segment) GetResultParam); ok {
		r0 = rf(segment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GetResultParam)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Segment) error); ok {
		r1 = rf(segment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Segment provides a mock function with given fields: rm, height
func (_m *MockSender) Segment(rm *RelayMessage, height int64) ([]*Segment, error) {
	ret := _m.Called(rm, height)

	var r0 []*Segment
	if rf, ok := ret.Get(0).(func(*RelayMessage, int64) []*Segment); ok {
		r0 = rf(rm, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Segment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*RelayMessage, int64) error); ok {
		r1 = rf(rm, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMonitorLoop provides a mock function with given fields:
func (_m *MockSender) StopMonitorLoop() {
	_m.Called()
}

// UpdateSegment provides a mock function with given fields: bp, segment
func (_m *MockSender) UpdateSegment(bp *BlockProof, segment *Segment) error {
	ret := _m.Called(bp, segment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*BlockProof, *Segment) error); ok {
		r0 = rf(bp, segment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
