const rlp = require('rlp');
const urlSafeBase64 = require('urlsafe-base64');
const _ = require("lodash");

let base64Msg = "-QTN-QHyuQHv-QHsuQFw-QFtAoJStIcFxV5Kmr3IlQC2tXkb4LXvZwY7PBC4QPuBUU2y_aDi6itBOkbG81Fl-q19VwiZ1N7rNljBmgRZbULVRzRW66CzUxQZ879tn2JPi62VQf--rC4Ig0hAh4AeCOfIVbvTOaDtnmROWbL_ZURvXz19d8J4WPrPius7lpRw10mcefl1fPgA-ACwAIAgcEgsGg8IhMKgYChcDCEEEAAiEDIEOAESi8DjMahUNjsgkMiAAGkcDBEmhMBAuLH4r6BZYrJ5EwPxGn5mO_ujZRYkCO0Dk15HLw6j5mjCaJkqm_gAoAVknCQVH0TEqd0QtlLNIP--IgOx67oNOINC-ZlhnSr3uGn4Z6BPgg7vqUw-cx0XdGHyYLkMb3xx94Fw-tV4wTahIDO0I6DDfqr6uABi3rfq-oL_xCcZYEE47vAjTaafeJlW95SdHaC7h9tLIOHUai2PDmrqbjL7BFHEdKkFlCCG6OM7PisauPgA-AC4dfhzAOIBoDI6___3ekQyteD-9Y-ifseTUUzmuuQgIMNp8owSz-0Q-E34S4cFxV5KuR08uEGKxiP7QFTnSNXiEuwBwMJjJWAXs2Nd3EEvAzpUBWz4MG0DFz5hZgXIcX6l56RCnMGlOgrh6FwecMdU2aArK9E4APgA-AD5AtO5AtD5As0AuQFN-QFKuQFH-QFEgiAAuQE--QE7AJUBegwt2XUeWSrE-9bHC9XsV06_GYqDA-VQgwPlUIUC6Q7dALjvAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAABAAAAAgABAAAABAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4APgAoDd4mNL1u_4pyGAeXuCjpdU1aL--d-K3JsmM8SQr_P5v-QF5-QF2ALkBcvkBb7kBbPkBaYIgALkBY_kBYJUBegwt2XUeWSrE-9bHC9XsV06_GYr4UpZNZXNzYWdlKHN0cixpbnQsYnl0ZXMpuDhidHA6Ly8weDgucHJhLzB4RjBlNDY4NDdjOGJGRDEyMkM0YjVFRUUxRDQ0OTRGRjdDNUZDNTEwNAH49Ljy-PC4OWJ0cDovLzB4My5pY29uL2N4N2EwYzJkZDk3NTFlNTkyYWM0ZmJkNmM3MGJkNWVjNTc0ZWJmMTk4Ybg4YnRwOi8vMHg4LnByYS8weEYwZTQ2ODQ3YzhiRkQxMjJDNGI1RUVFMUQ0NDk0RkY3QzVGQzUxMDSQQ29pbi9XcmFwcGVkQ29pbgG4Z_hlALhi-GCqaHhiNmI1NzkxYmUwYjVlZjY3MDYzYjNjMTBiODQwZmI4MTUxNGRiMmZkqjB4NjUxRDUyMDU0YzhhYzRiMTkxOTFkNzQyN0MyNjMzNzk3NTY3RDM5Y8nIhElDT06CANQ=";
base64Msg = _.padEnd(base64Msg, base64Msg.length + (4 - base64Msg.length % 4) % 4, "=");

const iconNet = "0x3.icon";
const praNet = "0x8.pra";
const prevBtpAddr = "btp://0x3.icon/cx7a0c2dd9751e592ac4fbd6c70bd5ec574ebf198a"
const validatorsList = [
    Buffer.from("793d85c311b7abcb35cad1f28180ab7e0ef4bed8", "hex"),
    Buffer.from("5ff3859ac4c50f2f6e94c3c9dc07867101058c1f", "hex"),
    Buffer.from("47a11185b6cdcb25a41f9646101e62c6f6f59254", "hex")
];
let encodedValidators = urlSafeBase64.encode(rlp.encode(validatorsList));
encodedValidators = _.padEnd(
    encodedValidators,
    encodedValidators.length + (4 - encodedValidators.length % 4) % 4,
    "="
);

const lastBlockHash = "0xe2ea2b413a46c6f35165faad7d570899d4deeb3658c19a04596d42d5473456eb";
const btpMsgs = ["0xf8f0b8396274703a2f2f3078332e69636f6e2f637837613063326464393735316535393261633466626436633730626435656335373465626631393861b8386274703a2f2f3078382e7072612f30784630653436383437633862464431323243346235454545314434343934464637433546433531303490436f696e2f57726170706564436f696e01b867f86500b862f860aa687862366235373931626530623565663637303633623363313062383430666238313531346462326664aa307836353144353230353463386163346231393139316437343237433236333337393735363744333963c9c88449434f4e8200d4"];
const initOffset = 21171;
const initRootSize = 8;
const initCacheSize = 8;
module.exports = {base64Msg, iconNet, praNet, lastBlockHash, btpMsgs, prevBtpAddr, validatorsList, encodedValidators, initOffset, initRootSize, initCacheSize};
